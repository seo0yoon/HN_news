{"id":"node_modules/acorn-node/lib/bigint/index.js","dependencies":[{"name":"C:\\Users\\82104\\Desktop\\HackerNews\\Hackernews\\package.json","includedInParent":true,"mtime":1658243361146},{"name":"C:\\Users\\82104\\Desktop\\HackerNews\\Hackernews\\node_modules\\acorn-node\\package.json","includedInParent":true,"mtime":1658243360743},{"name":"acorn","loc":{"line":5,"column":20,"index":84},"parent":"C:\\Users\\82104\\Desktop\\HackerNews\\Hackernews\\node_modules\\acorn-node\\lib\\bigint\\index.js","resolved":"C:\\Users\\82104\\Desktop\\HackerNews\\Hackernews\\node_modules\\acorn\\dist\\acorn.mjs"}],"generated":{"js":"/* Generated by `npm run build`, do not edit! */\n\n\"use strict\"\n\nvar acorn = require(\"acorn\")\nvar tt = acorn.tokTypes\nvar isIdentifierStart = acorn.isIdentifierStart\n\nmodule.exports = function(Parser) {\n  return /*@__PURE__*/(function (Parser) {\n    function anonymous () {\n      Parser.apply(this, arguments);\n    }\n\n    if ( Parser ) anonymous.__proto__ = Parser;\n    anonymous.prototype = Object.create( Parser && Parser.prototype );\n    anonymous.prototype.constructor = anonymous;\n\n    anonymous.prototype.parseLiteral = function parseLiteral (value) {\n      var node = Parser.prototype.parseLiteral.call(this, value)\n      if (node.raw.charCodeAt(node.raw.length - 1) == 110) { node.bigint = this.getNumberInput(node.start, node.end) }\n      return node\n    };\n\n    anonymous.prototype.readRadixNumber = function readRadixNumber (radix) {\n      var start = this.pos\n      this.pos += 2 // 0x\n      var val = this.readInt(radix)\n      if (val === null) { this.raise(this.start + 2, (\"Expected number in radix \" + radix)) }\n      if (this.input.charCodeAt(this.pos) == 110) {\n        var str = this.getNumberInput(start, this.pos)\n        val = typeof BigInt !== \"undefined\" ? BigInt(str) : null\n        ++this.pos\n      } else if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\") }\n      return this.finishToken(tt.num, val)\n    };\n\n    anonymous.prototype.readNumber = function readNumber (startsWithDot) {\n      var start = this.pos\n\n      // Not an int\n      if (startsWithDot) { return Parser.prototype.readNumber.call(this, startsWithDot) }\n\n      // Legacy octal\n      if (this.input.charCodeAt(start) === 48 && this.input.charCodeAt(start + 1) !== 110) {\n        return Parser.prototype.readNumber.call(this, startsWithDot)\n      }\n\n      if (this.readInt(10) === null) { this.raise(start, \"Invalid number\") }\n\n      // Not a BigInt, reset and parse again\n      if (this.input.charCodeAt(this.pos) != 110) {\n        this.pos = start\n        return Parser.prototype.readNumber.call(this, startsWithDot)\n      }\n\n      var str = this.getNumberInput(start, this.pos)\n      var val = typeof BigInt !== \"undefined\" ? BigInt(str) : null\n      ++this.pos\n      return this.finishToken(tt.num, val)\n    };\n\n    // This is basically a hook for acorn-numeric-separator\n    anonymous.prototype.getNumberInput = function getNumberInput (start, end) {\n      if (Parser.prototype.getNumberInput) { return Parser.prototype.getNumberInput.call(this, start, end) }\n      return this.input.slice(start, end)\n    };\n\n    return anonymous;\n  }(Parser))\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/acorn-node/lib/bigint/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}}],"sources":{"node_modules/acorn-node/lib/bigint/index.js":"/* Generated by `npm run build`, do not edit! */\n\n\"use strict\"\n\nvar acorn = require(\"acorn\")\nvar tt = acorn.tokTypes\nvar isIdentifierStart = acorn.isIdentifierStart\n\nmodule.exports = function(Parser) {\n  return /*@__PURE__*/(function (Parser) {\n    function anonymous () {\n      Parser.apply(this, arguments);\n    }\n\n    if ( Parser ) anonymous.__proto__ = Parser;\n    anonymous.prototype = Object.create( Parser && Parser.prototype );\n    anonymous.prototype.constructor = anonymous;\n\n    anonymous.prototype.parseLiteral = function parseLiteral (value) {\n      var node = Parser.prototype.parseLiteral.call(this, value)\n      if (node.raw.charCodeAt(node.raw.length - 1) == 110) { node.bigint = this.getNumberInput(node.start, node.end) }\n      return node\n    };\n\n    anonymous.prototype.readRadixNumber = function readRadixNumber (radix) {\n      var start = this.pos\n      this.pos += 2 // 0x\n      var val = this.readInt(radix)\n      if (val === null) { this.raise(this.start + 2, (\"Expected number in radix \" + radix)) }\n      if (this.input.charCodeAt(this.pos) == 110) {\n        var str = this.getNumberInput(start, this.pos)\n        val = typeof BigInt !== \"undefined\" ? BigInt(str) : null\n        ++this.pos\n      } else if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\") }\n      return this.finishToken(tt.num, val)\n    };\n\n    anonymous.prototype.readNumber = function readNumber (startsWithDot) {\n      var start = this.pos\n\n      // Not an int\n      if (startsWithDot) { return Parser.prototype.readNumber.call(this, startsWithDot) }\n\n      // Legacy octal\n      if (this.input.charCodeAt(start) === 48 && this.input.charCodeAt(start + 1) !== 110) {\n        return Parser.prototype.readNumber.call(this, startsWithDot)\n      }\n\n      if (this.readInt(10) === null) { this.raise(start, \"Invalid number\") }\n\n      // Not a BigInt, reset and parse again\n      if (this.input.charCodeAt(this.pos) != 110) {\n        this.pos = start\n        return Parser.prototype.readNumber.call(this, startsWithDot)\n      }\n\n      var str = this.getNumberInput(start, this.pos)\n      var val = typeof BigInt !== \"undefined\" ? BigInt(str) : null\n      ++this.pos\n      return this.finishToken(tt.num, val)\n    };\n\n    // This is basically a hook for acorn-numeric-separator\n    anonymous.prototype.getNumberInput = function getNumberInput (start, end) {\n      if (Parser.prototype.getNumberInput) { return Parser.prototype.getNumberInput.call(this, start, end) }\n      return this.input.slice(start, end)\n    };\n\n    return anonymous;\n  }(Parser))\n}\n"},"lineCount":72}},"error":null,"hash":"5a7099304f8ebcba241ff061eb834d1f","cacheData":{"env":{}}}