{"id":"node_modules/acorn-node/lib/class-fields/index.js","dependencies":[{"name":"C:\\Users\\82104\\Desktop\\HackerNews\\Hackernews\\package.json","includedInParent":true,"mtime":1658243361146},{"name":"C:\\Users\\82104\\Desktop\\HackerNews\\Hackernews\\node_modules\\acorn-node\\package.json","includedInParent":true,"mtime":1658243360743},{"name":"acorn","loc":{"line":5,"column":20,"index":84},"parent":"C:\\Users\\82104\\Desktop\\HackerNews\\Hackernews\\node_modules\\acorn-node\\lib\\class-fields\\index.js","resolved":"C:\\Users\\82104\\Desktop\\HackerNews\\Hackernews\\node_modules\\acorn\\dist\\acorn.mjs"},{"name":"../private-class-elements","loc":{"line":7,"column":35,"index":152},"parent":"C:\\Users\\82104\\Desktop\\HackerNews\\Hackernews\\node_modules\\acorn-node\\lib\\class-fields\\index.js","resolved":"C:\\Users\\82104\\Desktop\\HackerNews\\Hackernews\\node_modules\\acorn-node\\lib\\private-class-elements\\index.js"}],"generated":{"js":"/* Generated by `npm run build`, do not edit! */\n\n\"use strict\"\n\nvar acorn = require(\"acorn\")\nvar tt = acorn.tokTypes\nvar privateClassElements = require(\"../private-class-elements\")\n\nfunction maybeParseFieldValue(field) {\n  if (this.eat(tt.eq)) {\n    var oldInFieldValue = this._inFieldValue\n    this._inFieldValue = true\n    field.value = this.parseExpression()\n    this._inFieldValue = oldInFieldValue\n  } else { field.value = null }\n}\n\nmodule.exports = function(Parser) {\n  Parser = privateClassElements(Parser)\n  return /*@__PURE__*/(function (Parser) {\n    function anonymous () {\n      Parser.apply(this, arguments);\n    }\n\n    if ( Parser ) anonymous.__proto__ = Parser;\n    anonymous.prototype = Object.create( Parser && Parser.prototype );\n    anonymous.prototype.constructor = anonymous;\n\n    anonymous.prototype.parseClassElement = function parseClassElement (_constructorAllowsSuper) {\n      if (this.options.ecmaVersion >= 8 && (this.type == tt.name || this.type == this.privateNameToken || this.type == tt.bracketL || this.type == tt.string)) {\n        var branch = this._branch()\n        if (branch.type == tt.bracketL) {\n          var count = 0\n          do {\n            if (branch.eat(tt.bracketL)) { ++count }\n            else if (branch.eat(tt.bracketR)) { --count }\n            else { branch.next() }\n          } while (count > 0)\n        } else { branch.next() }\n        if (branch.type == tt.eq || branch.canInsertSemicolon() || branch.type == tt.semi) {\n          var node = this.startNode()\n          if (this.type == this.privateNameToken) {\n            this.parsePrivateClassElementName(node)\n          } else {\n            this.parsePropertyName(node)\n          }\n          if ((node.key.type === \"Identifier\" && node.key.name === \"constructor\") ||\n              (node.key.type === \"Literal\" && node.key.value === \"constructor\")) {\n            this.raise(node.key.start, \"Classes may not have a field called constructor\")\n          }\n          maybeParseFieldValue.call(this, node)\n          this.finishNode(node, \"FieldDefinition\")\n          this.semicolon()\n          return node\n        }\n      }\n\n      return Parser.prototype.parseClassElement.apply(this, arguments)\n    };\n\n    // Prohibit arguments in class field initializers\n    anonymous.prototype.parseIdent = function parseIdent (liberal, isBinding) {\n      var ident = Parser.prototype.parseIdent.call(this, liberal, isBinding)\n      if (this._inFieldValue && ident.name == \"arguments\") { this.raise(ident.start, \"A class field initializer may not contain arguments\") }\n      return ident\n    };\n\n    return anonymous;\n  }(Parser))\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/acorn-node/lib/class-fields/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}}],"sources":{"node_modules/acorn-node/lib/class-fields/index.js":"/* Generated by `npm run build`, do not edit! */\n\n\"use strict\"\n\nvar acorn = require(\"acorn\")\nvar tt = acorn.tokTypes\nvar privateClassElements = require(\"../private-class-elements\")\n\nfunction maybeParseFieldValue(field) {\n  if (this.eat(tt.eq)) {\n    var oldInFieldValue = this._inFieldValue\n    this._inFieldValue = true\n    field.value = this.parseExpression()\n    this._inFieldValue = oldInFieldValue\n  } else { field.value = null }\n}\n\nmodule.exports = function(Parser) {\n  Parser = privateClassElements(Parser)\n  return /*@__PURE__*/(function (Parser) {\n    function anonymous () {\n      Parser.apply(this, arguments);\n    }\n\n    if ( Parser ) anonymous.__proto__ = Parser;\n    anonymous.prototype = Object.create( Parser && Parser.prototype );\n    anonymous.prototype.constructor = anonymous;\n\n    anonymous.prototype.parseClassElement = function parseClassElement (_constructorAllowsSuper) {\n      if (this.options.ecmaVersion >= 8 && (this.type == tt.name || this.type == this.privateNameToken || this.type == tt.bracketL || this.type == tt.string)) {\n        var branch = this._branch()\n        if (branch.type == tt.bracketL) {\n          var count = 0\n          do {\n            if (branch.eat(tt.bracketL)) { ++count }\n            else if (branch.eat(tt.bracketR)) { --count }\n            else { branch.next() }\n          } while (count > 0)\n        } else { branch.next() }\n        if (branch.type == tt.eq || branch.canInsertSemicolon() || branch.type == tt.semi) {\n          var node = this.startNode()\n          if (this.type == this.privateNameToken) {\n            this.parsePrivateClassElementName(node)\n          } else {\n            this.parsePropertyName(node)\n          }\n          if ((node.key.type === \"Identifier\" && node.key.name === \"constructor\") ||\n              (node.key.type === \"Literal\" && node.key.value === \"constructor\")) {\n            this.raise(node.key.start, \"Classes may not have a field called constructor\")\n          }\n          maybeParseFieldValue.call(this, node)\n          this.finishNode(node, \"FieldDefinition\")\n          this.semicolon()\n          return node\n        }\n      }\n\n      return Parser.prototype.parseClassElement.apply(this, arguments)\n    };\n\n    // Prohibit arguments in class field initializers\n    anonymous.prototype.parseIdent = function parseIdent (liberal, isBinding) {\n      var ident = Parser.prototype.parseIdent.call(this, liberal, isBinding)\n      if (this._inFieldValue && ident.name == \"arguments\") { this.raise(ident.start, \"A class field initializer may not contain arguments\") }\n      return ident\n    };\n\n    return anonymous;\n  }(Parser))\n}\n"},"lineCount":71}},"error":null,"hash":"c2ab0e7497dd7c4a6e4cf1b03803ad75","cacheData":{"env":{}}}