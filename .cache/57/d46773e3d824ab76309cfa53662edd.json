{"id":"node_modules/acorn-node/lib/numeric-separator/index.js","dependencies":[{"name":"C:\\Users\\82104\\Desktop\\HackerNews\\Hackernews\\package.json","includedInParent":true,"mtime":1658243361146},{"name":"C:\\Users\\82104\\Desktop\\HackerNews\\Hackernews\\node_modules\\acorn-node\\package.json","includedInParent":true,"mtime":1658243360743}],"generated":{"js":"/* Generated by `npm run build`, do not edit! */\n\n\"use strict\"\n\nmodule.exports = function(Parser) {\n  return /*@__PURE__*/(function (Parser) {\n    function anonymous () {\n      Parser.apply(this, arguments);\n    }\n\n    if ( Parser ) anonymous.__proto__ = Parser;\n    anonymous.prototype = Object.create( Parser && Parser.prototype );\n    anonymous.prototype.constructor = anonymous;\n\n    anonymous.prototype.readInt = function readInt (radix, len) {\n      // Hack: len is only != null for unicode escape sequences,\n      // where numeric separators are not allowed\n      if (len != null) { return Parser.prototype.readInt.call(this, radix, len) }\n\n      var start = this.pos, total = 0, acceptUnderscore = false\n      for (;;) {\n        var code = this.input.charCodeAt(this.pos), val = (void 0)\n        if (code >= 97) { val = code - 97 + 10 } // a\n        else if (code == 95) {\n          if (!acceptUnderscore) { this.raise(this.pos, \"Invalid numeric separator\") }\n          ++this.pos\n          acceptUnderscore = false\n          continue\n        } else if (code >= 65) { val = code - 65 + 10 } // A\n        else if (code >= 48 && code <= 57) { val = code - 48 } // 0-9\n        else { val = Infinity }\n        if (val >= radix) { break }\n        ++this.pos\n        total = total * radix + val\n        acceptUnderscore = true\n      }\n      if (this.pos === start) { return null }\n      if (!acceptUnderscore) { this.raise(this.pos - 1, \"Invalid numeric separator\") }\n\n      return total\n    };\n\n    anonymous.prototype.readNumber = function readNumber (startsWithDot) {\n      var token = Parser.prototype.readNumber.call(this, startsWithDot)\n      var octal = this.end - this.start >= 2 && this.input.charCodeAt(this.start) === 48\n      var stripped = this.getNumberInput(this.start, this.end)\n      if (stripped.length < this.end - this.start) {\n        if (octal) { this.raise(this.start, \"Invalid number\") }\n        this.value = parseFloat(stripped)\n      }\n      return token\n    };\n\n    // This is used by acorn-bigint\n    anonymous.prototype.getNumberInput = function getNumberInput (start, end) {\n      return this.input.slice(start, end).replace(/_/g, \"\")\n    };\n\n    return anonymous;\n  }(Parser))\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/acorn-node/lib/numeric-separator/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}}],"sources":{"node_modules/acorn-node/lib/numeric-separator/index.js":"/* Generated by `npm run build`, do not edit! */\n\n\"use strict\"\n\nmodule.exports = function(Parser) {\n  return /*@__PURE__*/(function (Parser) {\n    function anonymous () {\n      Parser.apply(this, arguments);\n    }\n\n    if ( Parser ) anonymous.__proto__ = Parser;\n    anonymous.prototype = Object.create( Parser && Parser.prototype );\n    anonymous.prototype.constructor = anonymous;\n\n    anonymous.prototype.readInt = function readInt (radix, len) {\n      // Hack: len is only != null for unicode escape sequences,\n      // where numeric separators are not allowed\n      if (len != null) { return Parser.prototype.readInt.call(this, radix, len) }\n\n      var start = this.pos, total = 0, acceptUnderscore = false\n      for (;;) {\n        var code = this.input.charCodeAt(this.pos), val = (void 0)\n        if (code >= 97) { val = code - 97 + 10 } // a\n        else if (code == 95) {\n          if (!acceptUnderscore) { this.raise(this.pos, \"Invalid numeric separator\") }\n          ++this.pos\n          acceptUnderscore = false\n          continue\n        } else if (code >= 65) { val = code - 65 + 10 } // A\n        else if (code >= 48 && code <= 57) { val = code - 48 } // 0-9\n        else { val = Infinity }\n        if (val >= radix) { break }\n        ++this.pos\n        total = total * radix + val\n        acceptUnderscore = true\n      }\n      if (this.pos === start) { return null }\n      if (!acceptUnderscore) { this.raise(this.pos - 1, \"Invalid numeric separator\") }\n\n      return total\n    };\n\n    anonymous.prototype.readNumber = function readNumber (startsWithDot) {\n      var token = Parser.prototype.readNumber.call(this, startsWithDot)\n      var octal = this.end - this.start >= 2 && this.input.charCodeAt(this.start) === 48\n      var stripped = this.getNumberInput(this.start, this.end)\n      if (stripped.length < this.end - this.start) {\n        if (octal) { this.raise(this.start, \"Invalid number\") }\n        this.value = parseFloat(stripped)\n      }\n      return token\n    };\n\n    // This is used by acorn-bigint\n    anonymous.prototype.getNumberInput = function getNumberInput (start, end) {\n      return this.input.slice(start, end).replace(/_/g, \"\")\n    };\n\n    return anonymous;\n  }(Parser))\n}\n"},"lineCount":62}},"error":null,"hash":"bbdf5d1d28801e0eb9b2779a99aa1918","cacheData":{"env":{}}}