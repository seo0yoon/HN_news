{"id":"node_modules/acorn-node/walk.js","dependencies":[{"name":"C:\\Users\\82104\\Desktop\\HackerNews\\Hackernews\\package.json","includedInParent":true,"mtime":1658243361146},{"name":"C:\\Users\\82104\\Desktop\\HackerNews\\Hackernews\\node_modules\\acorn-node\\package.json","includedInParent":true,"mtime":1658243360743},{"name":"xtend","loc":{"line":1,"column":20,"index":20},"parent":"C:\\Users\\82104\\Desktop\\HackerNews\\Hackernews\\node_modules\\acorn-node\\walk.js","resolved":"C:\\Users\\82104\\Desktop\\HackerNews\\Hackernews\\node_modules\\xtend\\immutable.js"},{"name":"acorn-walk","loc":{"line":2,"column":19,"index":48},"parent":"C:\\Users\\82104\\Desktop\\HackerNews\\Hackernews\\node_modules\\acorn-node\\walk.js","resolved":"C:\\Users\\82104\\Desktop\\HackerNews\\Hackernews\\node_modules\\acorn-walk\\dist\\walk.mjs"}],"generated":{"js":"var xtend = require('xtend')\nvar walk = require('acorn-walk')\n\nvar base = xtend(walk.base)\nbase.Import = function () {}\n\nfunction simple (node, visitors, baseVisitor, state, override) {\n  return walk.simple(node, visitors, baseVisitor || base, state, override)\n}\n\nfunction ancestor (node, visitors, baseVisitor, state) {\n  return walk.ancestor(node, visitors, baseVisitor || base, state)\n}\n\nfunction recursive (node, state, funcs, baseVisitor, override) {\n  return walk.recursive(node, state, funcs, baseVisitor || base, override)\n}\n\nfunction full (node, callback, baseVisitor, state, override) {\n  return walk.full(node, callback, baseVisitor || base, state, override)\n}\n\nfunction fullAncestor (node, callback, baseVisitor, state) {\n  return walk.fullAncestor(node, callback, baseVisitor || base, state)\n}\n\nfunction findNodeAt (node, start, end, test, baseVisitor, state) {\n  return walk.findNodeAt(node, start, end, test, baseVisitor || base, state)\n}\n\nfunction findNodeAround (node, pos, test, baseVisitor, state) {\n  return walk.findNodeAround(node, pos, test, baseVisitor || base, state)\n}\n\nfunction findNodeAfter (node, pos, test, baseVisitor, state) {\n  return walk.findNodeAfter(node, pos, test, baseVisitor || base, state)\n}\n\nfunction findNodeBefore (node, pos, test, baseVisitor, state) {\n  return walk.findNodeBefore(node, pos, test, baseVisitor || base, state)\n}\n\nfunction make (funcs, baseVisitor) {\n  return walk.make(funcs, baseVisitor || base)\n}\n\nexports.simple = simple\nexports.ancestor = ancestor\nexports.recursive = recursive\nexports.full = full\nexports.fullAncestor = fullAncestor\nexports.findNodeAt = findNodeAt\nexports.findNodeAround = findNodeAround\nexports.findNodeAfter = findNodeAfter\nexports.findNodeBefore = findNodeBefore\nexports.make = make\nexports.base = base\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/acorn-node/walk.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/acorn-node/walk.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}}],"sources":{"node_modules/acorn-node/walk.js":"var xtend = require('xtend')\nvar walk = require('acorn-walk')\n\nvar base = xtend(walk.base)\nbase.Import = function () {}\n\nfunction simple (node, visitors, baseVisitor, state, override) {\n  return walk.simple(node, visitors, baseVisitor || base, state, override)\n}\n\nfunction ancestor (node, visitors, baseVisitor, state) {\n  return walk.ancestor(node, visitors, baseVisitor || base, state)\n}\n\nfunction recursive (node, state, funcs, baseVisitor, override) {\n  return walk.recursive(node, state, funcs, baseVisitor || base, override)\n}\n\nfunction full (node, callback, baseVisitor, state, override) {\n  return walk.full(node, callback, baseVisitor || base, state, override)\n}\n\nfunction fullAncestor (node, callback, baseVisitor, state) {\n  return walk.fullAncestor(node, callback, baseVisitor || base, state)\n}\n\nfunction findNodeAt (node, start, end, test, baseVisitor, state) {\n  return walk.findNodeAt(node, start, end, test, baseVisitor || base, state)\n}\n\nfunction findNodeAround (node, pos, test, baseVisitor, state) {\n  return walk.findNodeAround(node, pos, test, baseVisitor || base, state)\n}\n\nfunction findNodeAfter (node, pos, test, baseVisitor, state) {\n  return walk.findNodeAfter(node, pos, test, baseVisitor || base, state)\n}\n\nfunction findNodeBefore (node, pos, test, baseVisitor, state) {\n  return walk.findNodeBefore(node, pos, test, baseVisitor || base, state)\n}\n\nfunction make (funcs, baseVisitor) {\n  return walk.make(funcs, baseVisitor || base)\n}\n\nexports.simple = simple\nexports.ancestor = ancestor\nexports.recursive = recursive\nexports.full = full\nexports.fullAncestor = fullAncestor\nexports.findNodeAt = findNodeAt\nexports.findNodeAround = findNodeAround\nexports.findNodeAfter = findNodeAfter\nexports.findNodeBefore = findNodeBefore\nexports.make = make\nexports.base = base\n"},"lineCount":58}},"error":null,"hash":"589d0fe6d8a75da9f6cc64c71af8a3e1","cacheData":{"env":{}}}